@page
@model HubApi.Pages.Admin.OrdersV2Model
@{
    ViewData["Title"] = "Orders V2";
    ViewData["ActivePage"] = "OrdersV2";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">
            <i class="fas fa-shopping-cart me-2"></i>Orders V2
        </h1>
        <div class="text-muted">
            <small>Orders from new database schema</small>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Order List</h5>
                <div class="d-flex gap-2">
                    <input type="text" id="searchInput" class="form-control form-control-sm" placeholder="Search orders..." style="width: 200px;">
                    <select id="statusFilter" class="form-select form-select-sm" style="width: 150px;">
                        <option value="">All Statuses</option>
                        <option value="processing">Processing</option>
                        <option value="completed">Completed</option>
                        <option value="shipped">Shipped</option>
                        <option value="cancelled">Cancelled</option>
                        <option value="refunded">Refunded</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (!Model.Orders.Any())
            {
                <div class="text-center py-5">
                    <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No orders found</h5>
                    <p class="text-muted">Process some raw order data to see orders here.</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover" id="ordersTable">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Site</th>
                                <th>Customer</th>
                                <th>Total</th>
                                <th>Status</th>
                                <th>Gateway</th>
                                <th>Placed At</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in Model.Orders)
                            {
                                <tr>
                                    <td>
                                        <strong>@order.WcOrderId</strong>
                                        <br>
                                        <small class="text-muted">ID: @order.Id.ToString("N")[..8]...</small>
                                    </td>
                                    <td>
                                        <span class="badge bg-primary">@order.SiteName</span>
                                    </td>
                                    <td>
                                        <div>@order.CustomerName</div>
                                        <small class="text-muted">@order.CustomerEmail</small>
                                    </td>
                                    <td>
                                        <div class="fw-bold">@order.Currency @order.OrderTotal</div>
                                        <small class="text-muted">Subtotal: @order.Currency @order.Subtotal</small>
                                    </td>
                                    <td>
                                        <span class="badge bg-@(GetStatusColor(order.Status))">@order.Status</span>
                                    </td>
                                    <td>
                                        <small>@order.PaymentGatewayCode</small>
                                    </td>
                                    <td>
                                        <div>@order.PlacedAt</div>
                                        <small class="text-muted">Synced: @order.SyncedAt.ToString("yyyy-MM-dd HH:mm")</small>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button type="button" class="btn btn-outline-primary view-order-btn" 
                                                    data-order-id="@order.Id" data-wc-order-id="@order.WcOrderId">
                                                <i class="fas fa-eye"></i> View
                                            </button>
                                            <button type="button" class="btn btn-outline-warning edit-gateway-btn" 
                                                    data-order-id="@order.Id" data-gateway="@order.PaymentGatewayCode" data-wc-order-id="@order.WcOrderId">
                                                <i class="fas fa-credit-card"></i> Edit Gateway
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (Model.TotalPages > 1)
                {
                    <div class="text-center mt-4">
                        <button type="button" class="btn btn-primary" id="loadMoreBtn">
                            Load More Orders
                        </button>
                        <div class="mt-2">
                            <small class="text-muted">Page @Model.CurrentPage of @Model.TotalPages</small>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<!-- Order Details Modal -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Order Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="orderDetailsContent">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Gateway Modal -->
<div class="modal fade" id="editGatewayModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Payment Gateway</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editGatewayForm">
                    <input type="hidden" id="editOrderId" />
                    <div class="mb-3">
                        <label for="editWcOrderId" class="form-label">Order ID</label>
                        <input type="text" class="form-control" id="editWcOrderId" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="editPaymentGateway" class="form-label">Payment Gateway *</label>
                        <select class="form-select" id="editPaymentGateway" required>
                            <option value="">Choose a gateway...</option>
                        </select>
                        <small class="form-text text-muted">Select the payment gateway used for this order</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveGatewayBtn">Save Changes</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        console.log('OrdersV2 JavaScript loading...');
        
        let currentPage = @Model.CurrentPage;
        let isLoading = false;

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing OrdersV2 page...');
            
            // Initialize search and filter
            initializeSearchAndFilter();
            
            // Initialize button handlers
            initializeButtonHandlers();
            
            console.log('OrdersV2 page initialized successfully');
        });

        function initializeSearchAndFilter() {
            const searchInput = document.getElementById('searchInput');
            const statusFilter = document.getElementById('statusFilter');
            
            if (searchInput) {
                searchInput.addEventListener('input', filterOrders);
                console.log('Search input listener added');
            }
            
            if (statusFilter) {
                statusFilter.addEventListener('change', filterOrders);
                console.log('Status filter listener added');
            }
        }

        function initializeButtonHandlers() {
            console.log('Initializing button handlers...');
            
            // Use event delegation for buttons
            document.addEventListener('click', function(e) {
                // Handle view order button clicks
                if (e.target.closest('.view-order-btn')) {
                    const btn = e.target.closest('.view-order-btn');
                    const orderId = btn.dataset.orderId;
                    const wcOrderId = btn.dataset.wcOrderId;
                    console.log('View button clicked for order:', orderId, wcOrderId);
                    viewOrderDetails(orderId, wcOrderId);
                }
                
                // Handle edit gateway button clicks
                if (e.target.closest('.edit-gateway-btn')) {
                    const btn = e.target.closest('.edit-gateway-btn');
                    const orderId = btn.dataset.orderId;
                    const gateway = btn.dataset.gateway;
                    const wcOrderId = btn.dataset.wcOrderId;
                    console.log('Edit gateway button clicked for order:', orderId, gateway, wcOrderId);
                    editOrderGateway(orderId, gateway, wcOrderId);
                }
            });
            
            // Load more button
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', loadMoreOrders);
            }
            
            // Save gateway button
            const saveGatewayBtn = document.getElementById('saveGatewayBtn');
            if (saveGatewayBtn) {
                saveGatewayBtn.addEventListener('click', saveOrderGateway);
            }
            
            console.log('Event listeners attached successfully');
        }

        function filterOrders() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value.toLowerCase();
            const table = document.getElementById('ordersTable');
            const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

            for (let row of rows) {
                const orderId = row.cells[0].textContent.toLowerCase();
                const customer = row.cells[2].textContent.toLowerCase();
                const status = row.cells[4].textContent.toLowerCase();
                
                const matchesSearch = orderId.includes(searchTerm) || customer.includes(searchTerm);
                const matchesStatus = !statusFilter || status.includes(statusFilter);
                
                row.style.display = matchesSearch && matchesStatus ? '' : 'none';
            }
        }

        function viewOrderDetails(orderId, wcOrderId) {
            console.log('viewOrderDetails called with:', orderId, wcOrderId);
            
            // Show the modal first
            const modal = new bootstrap.Modal(document.getElementById('orderDetailsModal'));
            modal.show();
            
            // Fetch order details
            fetchOrderDetails(orderId, wcOrderId);
        }

        async function fetchOrderDetails(orderId, wcOrderId) {
            try {
                const response = await fetch('/api/v1/ordersv2/' + orderId);
                if (response.ok) {
                    const order = await response.json();
                    displayOrderDetails(order);
                } else {
                    document.getElementById('orderDetailsContent').innerHTML = 
                        '<div class="alert alert-danger">Failed to load order details</div>';
                }
            } catch (error) {
                console.error('Error fetching order details:', error);
                document.getElementById('orderDetailsContent').innerHTML = 
                    '<div class="alert alert-danger">Error loading order details: ' + error.message + '</div>';
            }
        }

        function formatShippingAddress(shippingAddress) {
            if (!shippingAddress) return 'N/A';
            
            try {
                // If it's already a string, try to parse it
                let addressData = shippingAddress;
                if (typeof shippingAddress === 'string') {
                    addressData = JSON.parse(shippingAddress);
                }
                
                // Build a formatted address string
                let addressParts = [];
                
                if (addressData.first_name || addressData.firstName) {
                    addressParts.push((addressData.first_name || addressData.firstName) + ' ' + (addressData.last_name || addressData.lastName || ''));
                }
                
                if (addressData.company) {
                    addressParts.push(addressData.company);
                }
                
                if (addressData.address_1 || addressData.address1) {
                    addressParts.push(addressData.address_1 || addressData.address1);
                }
                
                if (addressData.address_2 || addressData.address2) {
                    addressParts.push(addressData.address_2 || addressData.address2);
                }
                
                if (addressData.city) {
                    addressParts.push(addressData.city);
                }
                
                if (addressData.state || addressData.province) {
                    addressParts.push(addressData.state || addressData.province);
                }
                
                if (addressData.postcode || addressData.zip) {
                    addressParts.push(addressData.postcode || addressData.zip);
                }
                
                if (addressData.country) {
                    addressParts.push(addressData.country);
                }
                
                if (addressData.phone) {
                    addressParts.push('Phone: ' + addressData.phone);
                }
                
                return addressParts.filter(part => part && part.trim()).join('<br>') || 'Address data available but format unknown';
            } catch (error) {
                console.error('Error parsing shipping address:', error);
                return 'Address data available but could not be parsed';
            }
        }

        function displayOrderDetails(order) {
            const content = document.getElementById('orderDetailsContent');
            
            content.innerHTML = 
                '<div class="row">' +
                    '<div class="col-md-6">' +
                        '<h6 class="text-primary">Order Information</h6>' +
                        '<table class="table table-sm">' +
                            '<tr><td><strong>Order ID:</strong></td><td>' + order.wcOrderId + '</td></tr>' +
                            '<tr><td><strong>Site:</strong></td><td><span class="badge bg-primary">' + order.siteName + '</span></td></tr>' +
                            '<tr><td><strong>Status:</strong></td><td><span class="badge bg-' + getStatusColor(order.status) + '">' + order.status + '</span></td></tr>' +
                            '<tr><td><strong>Payment Gateway:</strong></td><td>' + (order.paymentGatewayCode || 'N/A') + '</td></tr>' +
                            '<tr><td><strong>Placed At:</strong></td><td>' + new Date(order.placedAt).toLocaleString() + '</td></tr>' +
                            '<tr><td><strong>Synced At:</strong></td><td>' + new Date(order.syncedAt).toLocaleString() + '</td></tr>' +
                        '</table>' +
                    '</div>' +
                    '<div class="col-md-6">' +
                        '<h6 class="text-primary">Customer Information</h6>' +
                        '<table class="table table-sm">' +
                            '<tr><td><strong>Name:</strong></td><td>' + order.customerName + '</td></tr>' +
                            '<tr><td><strong>Email:</strong></td><td>' + order.customerEmail + '</td></tr>' +
                            '<tr><td><strong>Phone:</strong></td><td>' + (order.customerPhone || 'N/A') + '</td></tr>' +
                        '</table>' +
                    '</div>' +
                '</div>' +
                '<div class="row mt-3">' +
                    '<div class="col-12">' +
                        '<h6 class="text-primary">Financial Information</h6>' +
                        '<table class="table table-sm">' +
                            '<tr><td><strong>Currency:</strong></td><td>' + order.currency + '</td></tr>' +
                            '<tr><td><strong>Subtotal:</strong></td><td>' + order.currency + ' ' + order.subtotal + '</td></tr>' +
                            '<tr><td><strong>Shipping:</strong></td><td>' + order.currency + ' ' + (order.shippingTotal || '0.00') + '</td></tr>' +
                            '<tr><td><strong>Tax:</strong></td><td>' + order.currency + ' ' + (order.taxTotal || '0.00') + '</td></tr>' +
                            '<tr><td><strong>Total:</strong></td><td><strong>' + order.currency + ' ' + order.orderTotal + '</strong></td></tr>' +
                        '</table>' +
                    '</div>' +
                '</div>' +
                '<div class="row mt-3">' +
                    '<div class="col-12">' +
                        '<h6 class="text-primary">Shipping Information</h6>' +
                        '<table class="table table-sm">' +
                            '<tr><td><strong>Shipping Method:</strong></td><td>' + (order.shippingMethod || 'N/A') + '</td></tr>' +
                            '<tr><td><strong>Shipping Address:</strong></td><td>' + formatShippingAddress(order.shippingAddress) + '</td></tr>' +
                        '</table>' +
                    '</div>' +
                '</div>' +
                '<div class="row mt-3">' +
                    '<div class="col-12">' +
                        '<h6 class="text-primary">Order Items</h6>' +
                        '<div class="table-responsive">' +
                            '<table class="table table-sm table-striped">' +
                                '<thead class="table-light">' +
                                    '<tr>' +
                                        '<th>Product</th>' +
                                        '<th>SKU</th>' +
                                        '<th>Qty</th>' +
                                        '<th>Price</th>' +
                                        '<th>Subtotal</th>' +
                                        '<th>Total</th>' +
                                    '</tr>' +
                                '</thead>' +
                                '<tbody>' +
                                    (order.orderItems && order.orderItems.length > 0 ? 
                                        order.orderItems.map(function(item) {
                                            return '<tr>' +
                                                '<td>' +
                                                    '<div><strong>' + (item.name || 'N/A') + '</strong></div>' +
                                                    '<small class="text-muted">ID: ' + (item.productId || 'N/A') + '</small>' +
                                                '</td>' +
                                                '<td>' + (item.sku || 'N/A') + '</td>' +
                                                '<td>' + (item.qty || '0') + '</td>' +
                                                '<td>' + order.currency + ' ' + (item.price || '0.00') + '</td>' +
                                                '<td>' + order.currency + ' ' + (item.subtotal || '0.00') + '</td>' +
                                                '<td><strong>' + order.currency + ' ' + (item.total || '0.00') + '</strong></td>' +
                                            '</tr>';
                                        }).join('') : 
                                        '<tr><td colspan="6" class="text-center text-muted">No order items found</td></tr>'
                                    ) +
                                '</tbody>' +
                            '</table>' +
                        '</div>' +
                    '</div>' +
                '</div>';
        }

        function editOrderGateway(orderId, currentGateway, wcOrderId) {
            console.log('Opening edit gateway modal for order:', orderId, currentGateway, wcOrderId);
            
            document.getElementById('editOrderId').value = orderId;
            document.getElementById('editWcOrderId').value = wcOrderId;
            document.getElementById('editPaymentGateway').value = currentGateway || '';
            
            // Load payment gateways if not already loaded
            if (document.getElementById('editPaymentGateway').options.length <= 1) {
                loadPaymentGateways();
            }
            
            // Use Bootstrap 5 modal API
            const modal = new bootstrap.Modal(document.getElementById('editGatewayModal'));
            modal.show();
        }

        async function loadPaymentGateways() {
            try {
                console.log('Loading payment gateways...');
                const response = await fetch('/api/v1/paymentgatewaydetails');
                if (response.ok) {
                    const data = await response.json();
                    console.log('Payment gateways loaded:', data);
                    populateGatewayDropdown(data);
                } else {
                    console.error('Failed to load payment gateways');
                }
            } catch (error) {
                console.error('Error loading payment gateways:', error);
            }
        }

        function populateGatewayDropdown(gateways) {
            const select = document.getElementById('editPaymentGateway');
            select.innerHTML = '<option value="">Choose a gateway...</option>';
            
            gateways.forEach(function(gateway) {
                const option = document.createElement('option');
                option.value = gateway.gatewayCode || gateway.GatewayCode;
                option.textContent = gateway.descriptor || gateway.Descriptor || gateway.gatewayCode || gateway.GatewayCode;
                select.appendChild(option);
            });
        }

        async function saveOrderGateway() {
            const orderId = document.getElementById('editOrderId').value;
            const newGateway = document.getElementById('editPaymentGateway').value;
            
            console.log('Saving gateway change:', { orderId, newGateway });
            
            if (!newGateway) {
                showAlert('Please select a payment gateway', 'warning');
                return;
            }
            
            try {
                console.log('Making API call to:', '/api/v1/ordersv2/' + orderId + '/gateway');
                const response = await fetch('/api/v1/ordersv2/' + orderId + '/gateway', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ paymentGatewayCode: newGateway })
                });
                
                if (response.ok) {
                    // Update the table row
                    updateOrderGatewayInTable(orderId, newGateway);
                    
                    // Close modal using Bootstrap 5 API
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editGatewayModal'));
                    if (modal) {
                        modal.hide();
                    }
                    
                    // Show success message
                    showAlert('Payment gateway updated successfully!', 'success');
                } else {
                    const error = await response.text();
                    showAlert('Error updating payment gateway: ' + error, 'danger');
                }
            } catch (error) {
                showAlert('Error updating payment gateway: ' + error.message, 'danger');
            }
        }

        function updateOrderGatewayInTable(orderId, newGateway) {
            const rows = document.querySelectorAll('#ordersTable tbody tr');
            rows.forEach(function(row) {
                const editBtn = row.querySelector('.edit-gateway-btn');
                if (editBtn && editBtn.dataset.orderId === orderId) {
                    const gatewayCell = row.querySelector('td:nth-child(6)');
                    if (gatewayCell) {
                        gatewayCell.innerHTML = '<small>' + newGateway + '</small>';
                    }
                    // Update the data attribute
                    editBtn.dataset.gateway = newGateway;
                    return;
                }
            });
        }

        function loadMoreOrders() {
            if (isLoading) return;
            
            isLoading = true;
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            const originalText = loadMoreBtn.innerHTML;
            loadMoreBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading...';
            loadMoreBtn.disabled = true;
            
            currentPage++;
            
            fetch('/api/v1/ordersv2?page=' + currentPage + '&pageSize=@Model.PageSize')
                .then(function(response) {
                    return response.json();
                })
                .then(function(data) {
                    if (data.orders && data.orders.length > 0) {
                        appendOrdersToTable(data.orders);
                        
                        // Update the count display
                        const currentCount = document.querySelectorAll('#ordersTable tbody tr').length;
                        const totalCount = @Model.TotalCount;
                        
                        if (currentCount >= totalCount) {
                            loadMoreBtn.style.display = 'none';
                            document.querySelector('.text-center.mt-4').innerHTML = 
                                '<small class="text-muted">All ' + totalCount + ' orders loaded</small>';
                        }
                    } else {
                        loadMoreBtn.style.display = 'none';
                        document.querySelector('.text-center.mt-4').innerHTML = 
                            '<small class="text-muted">All orders loaded</small>';
                    }
                })
                .catch(function(error) {
                    console.error('Error loading more orders:', error);
                    currentPage--; // Revert page number on error
                })
                .finally(function() {
                    isLoading = false;
                    loadMoreBtn.innerHTML = originalText;
                    loadMoreBtn.disabled = false;
                });
        }

        function appendOrdersToTable(orders) {
            const tbody = document.querySelector('#ordersTable tbody');
            
            orders.forEach(function(order) {
                const row = document.createElement('tr');
                row.innerHTML = 
                    '<td>' +
                        '<strong>' + order.wcOrderId + '</strong>' +
                        '<br>' +
                        '<small class="text-muted">ID: ' + order.id.substring(0, 8) + '...</small>' +
                    '</td>' +
                    '<td>' +
                        '<span class="badge bg-primary">' + order.siteName + '</span>' +
                    '</td>' +
                    '<td>' +
                        '<div>' + order.customerName + '</div>' +
                        '<small class="text-muted">' + order.customerEmail + '</small>' +
                    '</td>' +
                    '<td>' +
                        '<div class="fw-bold">' + order.currency + ' ' + order.orderTotal + '</div>' +
                        '<small class="text-muted">Subtotal: ' + order.currency + ' ' + order.subtotal + '</small>' +
                    '</td>' +
                    '<td>' +
                        '<span class="badge bg-' + getStatusColor(order.status) + '">' + order.status + '</span>' +
                    '</td>' +
                    '<td>' +
                        '<small>' + order.paymentGatewayCode + '</small>' +
                    '</td>' +
                    '<td>' +
                        '<div>' + order.placedAt + '</div>' +
                        '<small class="text-muted">Synced: ' + new Date(order.syncedAt).toLocaleString() + '</small>' +
                    '</td>' +
                    '<td>' +
                        '<div class="btn-group btn-group-sm" role="group">' +
                            '<button type="button" class="btn btn-outline-primary view-order-btn" ' +
                                    'data-order-id="' + order.id + '" data-wc-order-id="' + order.wcOrderId + '">' +
                                '<i class="fas fa-eye"></i> View' +
                            '</button>' +
                            '<button type="button" class="btn btn-outline-warning edit-gateway-btn" ' +
                                    'data-order-id="' + order.id + '" data-gateway="' + order.paymentGatewayCode + '" data-wc-order-id="' + order.wcOrderId + '">' +
                                '<i class="fas fa-credit-card"></i> Edit Gateway' +
                            '</button>' +
                        '</div>' +
                    '</td>';
                tbody.appendChild(row);
            });
        }

        function getStatusColor(status) {
            switch(status.toLowerCase()) {
                case 'processing': return 'warning';
                case 'completed': return 'success';
                case 'shipped': return 'info';
                case 'cancelled': return 'danger';
                case 'refunded': return 'secondary';
                default: return 'primary';
            }
        }

        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-' + type + ' alert-dismissible fade show';
            alertDiv.innerHTML = 
                message +
                '<button type="button" class="btn-close" data-bs-dismiss="modal"></button>';
            
            const container = document.querySelector('.container-fluid');
            container.insertBefore(alertDiv, container.firstChild);
            
            // Auto-remove after 5 seconds
            setTimeout(function() {
                alertDiv.remove();
            }, 5000);
        }
    </script>
}

@functions {
    private string GetStatusColor(string status)
    {
        return status?.ToLower() switch
        {
            "processing" => "warning",
            "completed" => "success",
            "shipped" => "info",
            "cancelled" => "danger",
            "refunded" => "secondary",
            _ => "primary"
        };
    }
}
