@page
@model HubApi.Pages.Admin.GatewayPartnersModel
@{
    ViewData["Title"] = "Gateway Partners";
}

@section Toolbar {
    <button class="btn btn-primary" onclick="openAddPartnerModal()">
        <i class="bi bi-plus-circle"></i> Add Partner
    </button>
    <button class="btn btn-success" onclick="openAssignModal()">
        <i class="bi bi-link"></i> Assign to Gateway
    </button>
    <button class="btn btn-outline-secondary" onclick="refreshData()">
        <i class="bi bi-arrow-clockwise"></i> Refresh Data
    </button>
    <button class="btn btn-outline-info" onclick="testPaymentGatewayAPI()">
        <i class="bi bi-bug"></i> Test API
    </button>
}

<div class="row">
    <div class="col-md-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Gateway Partners</h6>
            </div>
            <div class="card-body">
                <div id="partnersList">
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Gateway Assignments</h6>
            </div>
            <div class="card-body">
                <div id="assignmentsList">
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Partner Modal -->
<div class="modal fade" id="addPartnerModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Gateway Partner</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addPartnerForm">
                    <div class="mb-3">
                        <label for="partnerName" class="form-label">Partner Name *</label>
                        <input type="text" class="form-control" id="partnerName" required>
                    </div>
                    <div class="mb-3">
                        <label for="partnerCode" class="form-label">Partner Code *</label>
                        <input type="text" class="form-control" id="partnerCode" required>
                        <small class="form-text text-muted">Unique identifier for the partner</small>
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <textarea class="form-control" id="description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="revenueSharePercentage" class="form-label">Revenue Share Percentage *</label>
                        <div class="input-group">
                            <input type="number" class="form-control" id="revenueSharePercentage" step="0.01" min="0" max="100" required>
                            <span class="input-group-text">%</span>
                        </div>
                        <small class="form-text text-muted">Percentage of gateway fees to share with this partner</small>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="isActive" checked>
                            <label class="form-check-label" for="isActive">
                                Active
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="savePartner()">Save Partner</button>
            </div>
        </div>
    </div>
</div>

<!-- Assign to Gateway Modal -->
<div class="modal fade" id="assignModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Assign Partner to Gateway</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="assignForm">
                    <div class="mb-3">
                        <label for="assignPartnerId" class="form-label">Select Partner *</label>
                        <select class="form-select" id="assignPartnerId" required>
                            <option value="">Choose a partner...</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="assignGatewayId" class="form-label">Select Payment Gateway *</label>
                        <select class="form-select" id="assignGatewayId" required onchange="showGatewayInfo()">
                            <option value="">Choose a gateway...</option>
                        </select>
                        <div id="gatewayInfo" class="mt-2" style="display: none;">
                            <small class="text-muted">
                                <span id="gatewayFeeInfo"></span><br>
                                <span id="gatewayTypeInfo"></span>
                            </small>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="assignmentPercentage" class="form-label">Assignment Percentage *</label>
                        <div class="input-group">
                            <input type="number" class="form-control" id="assignmentPercentage" step="0.01" min="0" max="100" required>
                            <span class="input-group-text">%</span>
                        </div>
                        <small class="form-text text-muted">
                            Percentage of this gateway's transactions to assign to the partner.<br>
                            <strong>Note:</strong> This cannot exceed the partner's revenue share percentage.
                        </small>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="assignIsActive" checked>
                            <label class="form-check-label" for="assignIsActive">
                                Active
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveAssignment()">Assign Partner</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Partner Modal -->
<div class="modal fade" id="editPartnerModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Gateway Partner</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editPartnerForm">
                    <input type="hidden" id="editPartnerId">
                    <div class="mb-3">
                        <label for="editPartnerName" class="form-label">Partner Name *</label>
                        <input type="text" class="form-control" id="editPartnerName" required>
                    </div>
                    <div class="mb-3">
                        <label for="editPartnerCode" class="form-label">Partner Code *</label>
                        <input type="text" class="form-control" id="editPartnerCode" required>
                    </div>
                    <div class="mb-3">
                        <label for="editDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editDescription" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="editRevenueSharePercentage" class="form-label">Revenue Share Percentage *</label>
                        <div class="input-group">
                            <input type="number" class="form-control" id="editRevenueSharePercentage" step="0.01" min="0" max="100" required>
                            <span class="input-group-text">%</span>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="editIsActive">
                            <label class="form-check-label" for="editIsActive">
                                Active
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="updatePartner()">Update Partner</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let partners = [];
        let assignments = [];
        let paymentGateways = [];

        // Load data when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadPartners();
            loadAssignments();
            loadPaymentGateways();
        });

        // Load partners
        async function loadPartners() {
            try {
                const response = await fetch('/api/gatewaypartners');
                if (response.ok) {
                    partners = await response.json();
                    displayPartners();
                } else {
                    showAlert('Error loading partners', 'danger');
                }
            } catch (error) {
                showAlert('Error loading partners: ' + error.message, 'danger');
            }
        }

        // Display partners
        function displayPartners() {
            const container = document.getElementById('partnersList');
            if (partners.length === 0) {
                container.innerHTML = '<p class="text-muted text-center">No partners found</p>';
                return;
            }

            let html = '<div class="table-responsive"><table class="table table-bordered">';
            html += '<thead><tr><th>Partner</th><th>Code</th><th>Revenue Share</th><th>Status</th><th>Actions</th></tr></thead><tbody>';

            partners.forEach(partner => {
                const statusClass = partner.isActive ? 'success' : 'secondary';
                const statusText = partner.isActive ? 'Active' : 'Inactive';
                
                html += `<tr>
                    <td>
                        <strong>${partner.partnerName}</strong>
                        ${partner.description ? `<br><small class="text-muted">${partner.description}</small>` : ''}
                    </td>
                    <td><code>${partner.partnerCode}</code></td>
                    <td><span class="badge bg-info">${partner.revenueSharePercentage}%</span></td>
                    <td><span class="badge bg-${statusClass}">${statusText}</span></td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" onclick="editPartner('${partner.id}')">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deletePartner('${partner.id}')">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>`;
            });

            html += '</tbody></table></div>';
            container.innerHTML = html;
        }

        // Load assignments
        async function loadAssignments() {
            try {
                const response = await fetch('/api/gatewaypartners/assignments');
                if (response.ok) {
                    assignments = await response.json();
                    displayAssignments();
                } else {
                    showAlert('Error loading assignments', 'danger');
                }
            } catch (error) {
                showAlert('Error loading assignments: ' + error.message, 'danger');
            }
        }

        // Display assignments
        function displayAssignments() {
            const container = document.getElementById('assignmentsList');
            if (assignments.length === 0) {
                container.innerHTML = '<p class="text-muted text-center">No assignments found</p>';
                return;
            }

            let html = '<div class="table-responsive"><table class="table table-bordered">';
            html += '<thead><tr><th>Partner</th><th>Gateway</th><th>Assignment %</th><th>Status</th><th>Actions</th></tr></thead><tbody>';

            assignments.forEach(assignment => {
                const statusClass = assignment.isActive ? 'success' : 'secondary';
                const statusText = assignment.isActive ? 'Active' : 'Inactive';
                
                // Look up partner information from the partners array
                const partner = partners.find(p => (p.id || p.Id) === assignment.gatewayPartnerId);
                const partnerName = partner ? (partner.partnerName || partner.PartnerName) : 'Unknown Partner';
                const partnerCode = partner ? (partner.partnerCode || partner.PartnerCode) : 'N/A';
                
                // Look up payment gateway information from the paymentGateways array
                const gateway = paymentGateways.find(g => (g.id || g.Id) === assignment.paymentGatewayId);
                const gatewayInfo = gateway ? (gateway.gatewayCode || gateway.GatewayCode) : assignment.paymentGatewayId;
                
                html += `<tr>
                    <td>
                        <strong>${partnerName}</strong>
                        <br><small class="text-muted">${partnerCode}</small>
                    </td>
                    <td><code>${gatewayInfo}</code></td>
                    <td><span class="badge bg-warning">${assignment.assignmentPercentage}%</span></td>
                    <td><span class="badge bg-${statusClass}">${statusText}</span></td>
                    <td>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteAssignment('${assignment.id}')">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>`;
            });

            html += '</tbody></table></div>';
            container.innerHTML = html;
        }

        // Load payment gateways
        async function loadPaymentGateways() {
            try {
                console.log('Loading payment gateways...');
                
                // Try the v1 endpoint first
                let response = await fetch('/api/v1/paymentgatewaydetails');
                console.log('V1 endpoint response status:', response.status);
                
                // If v1 fails, try the regular endpoint
                if (!response.ok) {
                    console.log('V1 endpoint failed, trying regular endpoint...');
                    response = await fetch('/api/paymentgatewaydetails');
                    console.log('Regular endpoint response status:', response.status);
                }
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('Payment gateways data:', data);
                    
                    // Handle both array and paginated response formats
                    paymentGateways = Array.isArray(data) ? data : (data.data || []);
                    console.log('Processed payment gateways:', paymentGateways);
                    
                    // Validate gateway data structure
                    if (paymentGateways.length > 0) {
                        const firstGateway = paymentGateways[0];
                        console.log('First gateway structure:', {
                            id: firstGateway.Id,
                            gatewayCode: firstGateway.GatewayCode,
                            descriptor: firstGateway.Descriptor,
                            feeType: firstGateway.FeeType,
                            feesPercentage: firstGateway.FeesPercentage,
                            feesFixed: firstGateway.FeesFixed
                        });
                    }
                    
                    populateGatewaySelects();
                    
                    if (paymentGateways.length === 0) {
                        showAlert('No payment gateways found. Please add some gateways first.', 'warning');
                    }
                } else {
                    const errorText = await response.text();
                    console.error('Error response:', errorText);
                    showAlert('Error loading payment gateways: ' + errorText, 'danger');
                }
            } catch (error) {
                console.error('Exception loading payment gateways:', error);
                showAlert('Error loading payment gateways: ' + error.message, 'danger');
            }
        }

        // Populate gateway selects
        function populateGatewaySelects() {
            const assignSelect = document.getElementById('assignGatewayId');
            assignSelect.innerHTML = '<option value="">Choose a gateway...</option>';
            
            if (paymentGateways.length === 0) {
                assignSelect.innerHTML = '<option value="">No gateways available</option>';
                return;
            }
            
            // Sort gateways by gateway code for better UX
            const sortedGateways = [...paymentGateways].sort((a, b) => {
                const codeA = a.gatewayCode || a.GatewayCode || '';
                const codeB = b.gatewayCode || b.GatewayCode || '';
                return codeA.localeCompare(codeB);
            });
            
            sortedGateways.forEach(gateway => {
                const option = document.createElement('option');
                option.value = gateway.id || gateway.Id;
                // Show only gateway code
                option.textContent = gateway.gatewayCode || gateway.GatewayCode;
                assignSelect.appendChild(option);
            });
        }

        // Show gateway information when selected
        function showGatewayInfo() {
            const gatewayId = document.getElementById('assignGatewayId').value;
            const gatewayInfo = document.getElementById('gatewayInfo');
            
            if (!gatewayId) {
                gatewayInfo.style.display = 'none';
                return;
            }
            
            const gateway = paymentGateways.find(g => (g.id || g.Id) === gatewayId);
            if (gateway) {
                let feeInfo = '';
                const feeType = gateway.feeType || gateway.FeeType;
                const feesPercentage = gateway.feesPercentage || gateway.FeesPercentage;
                const feesFixed = gateway.feesFixed || gateway.FeesFixed;
                const gatewayCode = gateway.gatewayCode || gateway.GatewayCode;
                
                if (feeType === 'percentage' && feesPercentage !== null) {
                    feeInfo = `Fee: ${feesPercentage}% of transaction amount`;
                } else if (feeType === 'fixed' && feesFixed !== null) {
                    feeInfo = `Fee: $${feesFixed} fixed per transaction`;
                } else {
                    feeInfo = 'Fee: Not configured';
                }
                
                const typeInfo = `Gateway Type: ${gatewayCode || 'Unknown'}`;
                
                document.getElementById('gatewayFeeInfo').textContent = feeInfo;
                document.getElementById('gatewayTypeInfo').textContent = typeInfo;
                gatewayInfo.style.display = 'block';
            }
        }

        // Open add partner modal
        function openAddPartnerModal() {
            document.getElementById('addPartnerForm').reset();
            new bootstrap.Modal(document.getElementById('addPartnerModal')).show();
        }

        // Open assign modal
        function openAssignModal() {
            document.getElementById('assignForm').reset();
            
            // Populate partner select
            const partnerSelect = document.getElementById('assignPartnerId');
            partnerSelect.innerHTML = '<option value="">Choose a partner...</option>';
            
            partners.forEach(partner => {
                const option = document.createElement('option');
                option.value = partner.Id || partner.id;
                option.textContent = partner.PartnerName || partner.partnerName;
                partnerSelect.appendChild(option);
            });

            new bootstrap.Modal(document.getElementById('assignModal')).show();
        }

        // Save partner
        async function savePartner() {
            const form = document.getElementById('addPartnerForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const partnerData = {
                partnerName: document.getElementById('partnerName').value,
                partnerCode: document.getElementById('partnerCode').value,
                description: document.getElementById('description').value,
                revenueSharePercentage: parseFloat(document.getElementById('revenueSharePercentage').value),
                isActive: document.getElementById('isActive').checked
            };

            try {
                const response = await fetch('/api/gatewaypartners', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(partnerData)
                });

                if (response.ok) {
                    showAlert('Partner added successfully!', 'success');
                    $('#addPartnerModal').modal('hide');
                    
                    // Refresh partners data
                    await loadPartners();
                } else {
                    const error = await response.text();
                    showAlert('Error adding partner: ' + error, 'danger');
                }
            } catch (error) {
                showAlert('Error adding partner: ' + error.message, 'danger');
            }
        }

        // Save assignment
        async function saveAssignment() {
            const form = document.getElementById('assignForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const partnerId = document.getElementById('assignPartnerId').value;
            const assignmentPercentage = parseFloat(document.getElementById('assignmentPercentage').value);
            
            // Validate assignment percentage against partner's revenue share
            const partner = partners.find(p => (p.Id || p.id) === partnerId);
            if (partner) {
                const revenueShare = partner.RevenueSharePercentage || partner.revenueSharePercentage;
                if (assignmentPercentage > revenueShare) {
                    showAlert(`Assignment percentage (${assignmentPercentage}%) cannot exceed partner's revenue share percentage (${revenueShare}%)`, 'warning');
                    return;
                }
            }

            const assignmentData = {
                gatewayPartnerId: partnerId,
                paymentGatewayId: document.getElementById('assignGatewayId').value,
                assignmentPercentage: assignmentPercentage,
                isActive: document.getElementById('assignIsActive').checked
            };

            // Validate required fields
            if (!assignmentData.gatewayPartnerId) {
                showAlert('Please select a partner', 'warning');
                return;
            }
            if (!assignmentData.paymentGatewayId) {
                showAlert('Please select a payment gateway', 'warning');
                return;
            }
            if (!assignmentData.assignmentPercentage || assignmentData.assignmentPercentage <= 0) {
                showAlert('Please enter a valid assignment percentage', 'warning');
                return;
            }

            // Validate GUID format
            const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
            if (!guidRegex.test(assignmentData.gatewayPartnerId)) {
                showAlert('Invalid partner ID format', 'warning');
                return;
            }
            if (!guidRegex.test(assignmentData.paymentGatewayId)) {
                showAlert('Invalid payment gateway ID format', 'warning');
                return;
            }

            console.log('Assignment data being sent:', assignmentData);

            try {
                const response = await fetch('/api/gatewaypartners/assign', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(assignmentData)
                });

                console.log('Assignment response status:', response.status);
                console.log('Assignment response headers:', response.headers);

                if (response.ok) {
                    showAlert('Partner assigned successfully!', 'success');
                    $('#assignModal').modal('hide');
                    
                    // Refresh both assignments and partners data
                    await loadAssignments();
                    await loadPartners();
                } else {
                    const errorText = await response.text();
                    console.error('Assignment error response:', errorText);
                    
                    // Try to parse JSON error for better display
                    try {
                        const errorJson = JSON.parse(errorText);
                        if (errorJson.errors) {
                            // Handle validation errors
                            const errorMessages = Object.values(errorJson.errors).flat().join(', ');
                            showAlert('Validation error: ' + errorMessages, 'danger');
                        } else if (errorJson.title) {
                            showAlert('Error: ' + errorJson.title, 'danger');
                        } else {
                            showAlert('Error assigning partner: ' + errorText, 'danger');
                        }
                    } catch (parseError) {
                        showAlert('Error assigning partner: ' + errorText, 'danger');
                    }
                }
            } catch (error) {
                console.error('Assignment exception:', error);
                showAlert('Error assigning partner: ' + error.message, 'danger');
            }
        }

        // Edit partner
        function editPartner(partnerId) {
            const partner = partners.find(p => p.id === partnerId);
            if (!partner) return;

            document.getElementById('editPartnerId').value = partner.id;
            document.getElementById('editPartnerName').value = partner.partnerName;
            document.getElementById('editPartnerCode').value = partner.partnerCode;
            document.getElementById('editDescription').value = partner.description || '';
            document.getElementById('editRevenueSharePercentage').value = partner.revenueSharePercentage;
            document.getElementById('editIsActive').checked = partner.isActive;

            new bootstrap.Modal(document.getElementById('editPartnerModal')).show();
        }

        // Update partner
        async function updatePartner() {
            const partnerId = document.getElementById('editPartnerId').value;
            const partnerData = {
                partnerName: document.getElementById('editPartnerName').value,
                partnerCode: document.getElementById('editPartnerCode').value,
                description: document.getElementById('editDescription').value,
                revenueSharePercentage: parseFloat(document.getElementById('editRevenueSharePercentage').value),
                isActive: document.getElementById('editIsActive').checked
            };

            try {
                const response = await fetch(`/api/gatewaypartners/${partnerId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(partnerData)
                });

                if (response.ok) {
                    showAlert('Partner updated successfully!', 'success');
                    $('#editPartnerModal').modal('hide');
                    
                    // Refresh partners data
                    await loadPartners();
                } else {
                    const error = await response.text();
                    showAlert('Error updating partner: ' + error, 'danger');
                }
            } catch (error) {
                showAlert('Error updating partner: ' + error.message, 'danger');
            }
        }

        // Delete partner
        async function deletePartner(partnerId) {
            if (!confirm('Are you sure you want to delete this partner?')) return;

            try {
                const response = await fetch(`/api/gatewaypartners/${partnerId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showAlert('Partner deleted successfully!', 'success');
                    
                    // Refresh both partners and assignments since deleting a partner affects assignments
                    await loadPartners();
                    await loadAssignments();
                } else {
                    const error = await response.text();
                    showAlert('Error deleting partner: ' + error, 'danger');
                }
            } catch (error) {
                showAlert('Error deleting partner: ' + error.message, 'danger');
            }
        }

        // Delete assignment
        async function deleteAssignment(assignmentId) {
            if (!confirm('Are you sure you want to delete this assignment?')) return;

            try {
                const response = await fetch(`/api/gatewaypartners/assignments/${assignmentId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showAlert('Assignment deleted successfully!', 'success');
                    loadAssignments();
                } else {
                    const error = await response.text();
                    showAlert('Error deleting assignment: ' + error, 'danger');
                }
            } catch (error) {
                showAlert('Error deleting assignment: ' + error.message, 'danger');
            }
        }

        // Refresh all data
        function refreshData() {
            showAlert('Refreshing data...', 'info');
            loadPartners();
            loadAssignments();
            loadPaymentGateways();
        }

        // Test Payment Gateway API
        async function testPaymentGatewayAPI() {
            showAlert('Testing Payment Gateway API...', 'info');
            
            try {
                // Test v1 endpoint
                console.log('Testing /api/v1/paymentgatewaydetails...');
                let response = await fetch('/api/v1/paymentgatewaydetails');
                console.log('V1 Status:', response.status, response.statusText);
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('V1 Data:', data);
                    showAlert(`V1 API working! Found ${data.length} gateways`, 'success');
                } else {
                    const errorText = await response.text();
                    console.log('V1 Error:', errorText);
                    showAlert(`V1 API failed: ${response.status} - ${errorText}`, 'warning');
                }
                
                // Test regular endpoint
                console.log('Testing /api/paymentgatewaydetails...');
                response = await fetch('/api/paymentgatewaydetails');
                console.log('Regular Status:', response.status, response.statusText);
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('Regular Data:', data);
                    showAlert(`Regular API working! Found ${data.length} gateways`, 'success');
                } else {
                    const errorText = await response.text();
                    console.log('Regular Error:', errorText);
                    showAlert(`Regular API failed: ${response.status} - ${errorText}`, 'warning');
                }
                
            } catch (error) {
                console.error('Test failed:', error);
                showAlert('API test failed: ' + error.message, 'danger');
            }
        }

        // Show alert
        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.querySelector('.main-content').insertBefore(alertDiv, document.querySelector('.main-content').firstChild);
            
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }
    </script>
}
