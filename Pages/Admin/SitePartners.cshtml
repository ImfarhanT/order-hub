@page
@model HubApi.Pages.Admin.SitePartnersModel
@{
    ViewData["Title"] = "Site-Partner Assignments";
}

<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Site-Partner Assignments</h1>
        <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addAssignmentModal">
            <i class="fas fa-plus fa-sm"></i> Assign Partner to Site
        </button>
    </div>

    <!-- Assignments List -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Current Assignments</h6>
        </div>
        <div class="card-body">
            @if (Model.SitePartners.Any())
            {
                <div class="table-responsive">
                    <table class="table table-bordered" id="assignmentsTable" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>Site</th>
                                <th>Partner</th>
                                <th>Share Type</th>
                                <th>Share Percentage</th>
                                <th>Status</th>
                                <th>Notes</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var assignment in Model.SitePartners)
                            {
                                <tr>
                                    <td>@assignment.SiteName</td>
                                    <td>@assignment.PartnerName</td>
                                    <td>
                                        <span class="badge badge-@(assignment.ShareType == "Profit" ? "success" : "info")">
                                            @assignment.ShareType
                                        </span>
                                    </td>
                                    <td>@assignment.SharePercentage%</td>
                                    <td>
                                        <span class="badge badge-@(assignment.IsActive ? "success" : "secondary")">
                                            @(assignment.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </td>
                                    <td>@(assignment.Notes ?? "-")</td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary" onclick="editAssignment('@assignment.Id')">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteAssignment('@assignment.Id')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-4">
                    <i class="fas fa-link fa-3x text-gray-300 mb-3"></i>
                    <p class="text-gray-500">No site-partner assignments found. Create your first assignment to get started!</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Add/Edit Assignment Modal -->
<div class="modal fade" id="addAssignmentModal" tabindex="-1" role="dialog" aria-labelledby="addAssignmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addAssignmentModalLabel">Assign Partner to Site</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="assignmentForm">
                <div class="modal-body">
                    <input type="hidden" id="assignmentId" name="Id" />
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="siteId">Site *</label>
                                <select class="form-control" id="siteId" name="siteId" required>
                                    <option value="">Select Site</option>
                                    @foreach (var site in Model.Sites)
                                    {
                                        <option value="@site.Id">@site.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="partnerId">Partner *</label>
                                <select class="form-control" id="partnerId" name="partnerId" required>
                                    <option value="">Select Partner</option>
                                    @foreach (var partner in Model.Partners)
                                    {
                                        <option value="@partner.Id">@partner.Name (@partner.ShareType: @partner.SharePercentage%)</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="assignmentShareType">Share Type *</label>
                                <select class="form-control" id="assignmentShareType" name="shareType" required>
                                    <option value="">Select Share Type</option>
                                    <option value="Profit">Profit Share</option>
                                    <option value="Revenue">Revenue Share</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="assignmentSharePercentage">Share Percentage *</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" id="assignmentSharePercentage" name="sharePercentage" 
                                           min="0" max="100" step="0.01" required>
                                    <div class="input-group-append">
                                        <span class="input-group-text">%</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="assignmentNotes">Notes</label>
                        <textarea class="form-control" id="assignmentNotes" name="notes" rows="3"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <div class="custom-control custom-switch">
                            <input type="checkbox" class="custom-control-input" id="assignmentIsActive" name="isActive" checked>
                            <label class="custom-control-label" for="assignmentIsActive">Active Assignment</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="submitAssignment()">Save Assignment</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteAssignmentModal" tabindex="-1" role="dialog" aria-labelledby="deleteAssignmentModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteAssignmentModalLabel">Delete Assignment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this site-partner assignment? This action cannot be undone.</p>
                <input type="hidden" id="deleteAssignmentId" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmDeleteAssignment()">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize DataTable
            if ($('#assignmentsTable tbody tr').length > 0) {
                $('#assignmentsTable').DataTable({
                    responsive: true,
                    order: [[0, 'asc'], [1, 'asc']]
                });
            }
            
            // Form submission
            $('#assignmentForm').on('submit', function(e) {
                console.log('Form submit event triggered');
                e.preventDefault();
                console.log('Default prevented, calling submitAssignment');
                submitAssignment();
            });
        });
        
        function editAssignment(assignmentId) {
            // Fetch assignment data and populate form
            fetch(`/api/v1/sitepartners/${assignmentId}`)
                .then(response => response.json())
                .then(assignment => {
                    $('#assignmentId').val(assignment.id);
                    $('#siteId').val(assignment.siteId);
                    $('#partnerId').val(assignment.partnerId);
                    $('#assignmentShareType').val(assignment.shareType);
                    $('#assignmentSharePercentage').val(assignment.sharePercentage);
                    $('#assignmentNotes').val(assignment.notes);
                    $('#assignmentIsActive').prop('checked', assignment.isActive);
                    
                    $('#addAssignmentModalLabel').text('Edit Assignment');
                    var modal = new bootstrap.Modal(document.getElementById('addAssignmentModal'));
                    modal.show();
                })
                .catch(error => {
                    console.error('Error fetching assignment:', error);
                    alert('Error loading assignment data');
                });
        }
        
        function deleteAssignment(assignmentId) {
            $('#deleteAssignmentId').val(assignmentId);
            var modal = new bootstrap.Modal(document.getElementById('deleteAssignmentModal'));
            modal.show();
        }
        
        function confirmDeleteAssignment() {
            const assignmentId = $('#deleteAssignmentId').val();
            
            fetch(`/api/v1/sitepartners/${assignmentId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Error deleting assignment');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error deleting assignment');
            });
        }
        
        function submitAssignment() {
            const formData = new FormData($('#assignmentForm')[0]);
            const assignmentData = Object.fromEntries(formData.entries());
            
            // Handle checkbox value and convert to proper types
            assignmentData.isActive = $('#assignmentIsActive').is(':checked');
            
            // Convert numeric fields
            if (assignmentData.sharePercentage) {
                assignmentData.sharePercentage = parseFloat(assignmentData.sharePercentage);
            }
            
            const assignmentId = $('#assignmentId').val();
            const method = assignmentId ? 'PUT' : 'POST';
            const url = assignmentId ? `/api/v1/sitepartners/${assignmentId}` : '/api/v1/sitepartners';
            
            // Remove Id field for new assignments (POST requests)
            if (method === 'POST') {
                delete assignmentData.Id;
            }
            
            console.log('Submitting assignment data:', assignmentData);
            console.log('URL:', url);
            console.log('Method:', method);
            
            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'same-origin',
                body: JSON.stringify(assignmentData)
            })
            .then(response => {
                console.log('Response status:', response.status);
                console.log('Response ok:', response.ok);
                
                if (response.ok) {
                    var modal = bootstrap.Modal.getInstance(document.getElementById('addAssignmentModal'));
                    modal.hide();
                    location.reload();
                } else {
                    // Get error details
                    return response.text().then(text => {
                        console.error('Error response:', text);
                        alert(`Error saving assignment: ${response.status} - ${text}`);
                    });
                }
            })
            .catch(error => {
                console.error('Fetch error:', error);
                alert('Error saving assignment: ' + error.message);
            });
        }
        
        // Reset form when modal is closed
        document.getElementById('addAssignmentModal').addEventListener('hidden.bs.modal', function () {
            $('#assignmentForm')[0].reset();
            $('#assignmentId').val('');
            $('#addAssignmentModalLabel').text('Assign Partner to Site');
        });
    </script>
}
